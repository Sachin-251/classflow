// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// schema.prisma

enum Role {
  PRINCIPAL
  TEACHER
  STUDENT
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  password String
  name String
  role Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classroomIds String[] @db.ObjectId
  classrooms Classroom[] @relation(fields: [classroomIds], references: [id])

}

model Classroom {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  startTime String
  endTime String
  days String[]
  teacherId String? @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userIds String[] @db.ObjectId
  students User[] @relation(fields: [userIds], references: [id])

  timetableId String? @db.ObjectId  
  timetable Timetable? @relation()
}

model Timetable {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  classroom Classroom @relation(fields: [classroomId], references: [id])
  classroomId String @db.ObjectId @unique
  periods Period[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Period {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subject     String
  startTime   DateTime
  endTime     DateTime
  timetable   Timetable @relation(fields: [timetableId], references: [id])
  timetableId String   @db.ObjectId

  @@unique([timetableId, startTime, endTime])
}

